#!/usr/bin/env bash

error() {
  echo " !     $*" >&2
  exit 1
}

status() {
  echo "-----> $*"
}

statusn() {
  echo -n "-----> $*"
}

# sed -l basically makes sed replace and buffer through stdin to stdout
# so you get updates while the command runs and dont wait for the end
# e.g. npm install | indent
indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";; # mac/bsd sed: -l buffers on line boundaries
    *)      sed -u "$c";; # unix/gnu sed: -u unbuffered (arbitrary) chunks of data
  esac
}

mktmpdir() {
  dir=$(mktemp -t fakesu-$1-XXXX)
  rm -rf $dir && mkdir -p $dir
  echo $dir
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

java_version() {
  base=$1
  echo $(${base}java -version 2>&1 | head -n 1 | cut -d '"' -f 2)
}

install_java() {
  cache_dir=$1
  build_dir=$2
  jdk_url=${3:-"http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.tar.gz"}
  jdk_ver=${4:-"1.8.0_20"}

  if [ ! -d "${cache_dir}" ]; then error "Invalid cache directory to store JDK."; fi
  if [ ! -d "${build_dir}" ]; then error "Invalid slug directory to install JDK."; fi

  mkdir -p "${build_dir}/.jdk"

  if [ ! -f "${cache_dir}/.jdk/bin/java" ] || [ "${jdk_ver}" != "$(java_version ${cache_dir}/.jdk/bin/)" ] ; then
    echo -n " (downloading...)"
    rm -rf "${cache_dir}/.jdk" && mkdir -p "${cache_dir}/.jdk"
    curl -L -C - -b "oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.tar.gz" | tar xz -C "${cache_dir}/.jdk" --strip-components=1
    rm -rf "${cache_dir}/.jdk/src.zip" "${cache_dir}/.jdk/javafx-src.zip" "${cache_dir}/.jdk/db" "${cache_dir}/.jdk/man"
  fi
  cp -r "${cache_dir}/.jdk/." "${build_dir}/.jdk"

  if [ ! -f "${build_dir}/.jdk/bin/java" ]; then
    error "Unable to retrieve JDK."
  fi

  export JAVA_HOME="${build_dir}/.jdk"
  export PATH="${build_dir}/.jdk/bin:${PATH}"
}

detect_java_version() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" = "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    echo "Invalid directory specified for pom file."
    return 1
  fi
  if [ -f ${baseDir}/system.properties ]; then
    javaVersion=$(get_app_system_value ${baseDir}/system.properties "java.runtime.version")
    if [ "$(is_supported_java_version ${javaVersion})" = "true" ]; then
      echo "${javaVersion}"
    else
      echo ""
    fi
  else
    echo ""
  fi
}

is_supported_java_version() {
  javaVersion=$1
  if [ "$(expr "${javaVersion}" : '1.[6-8]')" != 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

get_app_system_value() {
  local file=${1?"No file specified"}
  local key=${2?"No key specified"}

  # escape for regex
  local escaped_key=$(echo $key | sed "s/\./\\\./g")

  [ -f $file ] && \
  grep -E ^$escaped_key[[:space:]=]+ $file | \
  sed -E -e "s/$escaped_key([\ \t]*=[\ \t]*|[\ \t]+)([A-Za-z0-9\.-]*).*/\2/g"
}

jdk_overlay() {
  baseDir=$1
  shopt -s dotglob
  if [ -d ${baseDir}/.jdk ] && [ -d ${baseDir}/.jdk-overlay ]; then
    cp -r ${baseDir}/.jdk-overlay/* ${baseDir}/.jdk/
  fi
}

